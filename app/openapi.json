{
  "openapi": "3.0.2",
  "info": {
    "title": "Survey API",
    "description": "Comprehensive API documentation for the Survey platform. This API allows for user management, survey creation, question management, response collection, analytics, and more.",
    "version": "1.0.0",
    "contact": {
      "email": "your-email@example.com"
    }
  },
  "servers": [
    {
      "url": "/",
      "description": "Local development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Authorization header using the Bearer scheme. Example: 'Authorization: Bearer {token}'"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {"type": "string", "example": "64b7c2f1e4b0f2a1b2c3d4e5"},
          "username": {"type": "string", "example": "admin"},
          "email": {"type": "string", "example": "admin@example.com"},
          "role": {"type": "string", "enum": ["admin", "respondent"], "example": "admin"},
          "created_at": {"type": "string", "format": "date-time"},
          "updated_at": {"type": "string", "format": "date-time"}
        }
      },
      "UserLoginInput": {
        "type": "object",
        "properties": {
          "username": {"type": "string", "example": "admin"},
          "password": {"type": "string", "example": "adminpass"}
        },
        "required": ["username", "password"]
      },
      "UserRegistrationInput": {
        "type": "object",
        "properties": {
          "username": {"type": "string", "example": "newuser"},
          "email": {"type": "string", "example": "newuser@example.com"},
          "password": {"type": "string", "example": "password123"},
          "role": {"type": "string", "enum": ["admin", "respondent"], "example": "respondent"}
        },
        "required": ["username", "email", "password", "role"]
      },
      "Survey": {
        "type": "object",
        "properties": {
          "id": {"type": "string", "example": "64b7c2f1e4b0f2a1b2c3d4e6"},
          "title": {"type": "string", "example": "Customer Satisfaction Survey"},
          "description": {"type": "string", "example": "A survey to measure customer satisfaction."},
          "owner": {"$ref": "#/components/schemas/User"},
          "questions": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/Question"}
          },
          "created_at": {"type": "string", "format": "date-time"},
          "updated_at": {"type": "string", "format": "date-time"}
        }
      },
      "SurveyInput": {
        "type": "object",
        "properties": {
          "title": {"type": "string", "example": "Customer Satisfaction Survey"},
          "description": {"type": "string", "example": "A survey to measure customer satisfaction."},
          "questions": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/QuestionInput"}
          }
        },
        "required": ["title"]
      },
      "Question": {
        "type": "object",
        "properties": {
          "question_id": {"type": "string", "example": "q1"},
          "text": {"type": "string", "example": "How satisfied are you with our service?"},
          "type": {"type": "string", "enum": ["multiple_choice", "checkbox", "rating", "text"], "example": "multiple_choice"},
          "choices": {"type": "array", "items": {"type": "string"}, "example": ["Very Satisfied", "Satisfied", "Neutral", "Dissatisfied"]},
          "min": {"type": "integer", "example": 1},
          "max": {"type": "integer", "example": 5},
          "required": {"type": "boolean", "example": true},
          "order": {"type": "integer", "example": 1}
        }
      },
      "QuestionInput": {
        "type": "object",
        "properties": {
          "text": {"type": "string", "example": "How satisfied are you with our service?"},
          "type": {"type": "string", "enum": ["multiple_choice", "checkbox", "rating", "text"], "example": "multiple_choice"},
          "choices": {"type": "array", "items": {"type": "string"}, "example": ["Very Satisfied", "Satisfied", "Neutral", "Dissatisfied"]},
          "min": {"type": "integer", "example": 1},
          "max": {"type": "integer", "example": 5},
          "required": {"type": "boolean", "example": true},
          "order": {"type": "integer", "example": 1}
        },
        "required": ["text", "type"]
      },
      "Response": {
        "type": "object",
        "properties": {
          "id": {"type": "string", "example": "64b7c2f1e4b0f2a1b2c3d4e7"},
          "survey": {"$ref": "#/components/schemas/Survey"},
          "respondent": {"$ref": "#/components/schemas/User"},
          "submitted_at": {"type": "string", "format": "date-time"},
          "answers": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/Answer"}
          }
        }
      },
      "ResponseInput": {
        "type": "object",
        "properties": {
          "answers": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/AnswerInput"},
            "example": [
              {"question_id": "q1", "value": "Very Satisfied"},
              {"question_id": "q2", "value": 5}
            ]
          }
        },
        "required": ["answers"]
      },
      "Answer": {
        "type": "object",
        "properties": {
          "question_id": {"type": "string", "example": "q1"},
          "value": {"type": "object", "example": "Very Satisfied"}
        }
      },
      "AnswerInput": {
        "type": "object",
        "properties": {
          "question_id": {"type": "string", "example": "q1"},
          "value": {"type": "object", "example": "Very Satisfied"}
        },
        "required": ["question_id", "value"]
      }
    }
  },
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Creates a new user account. Only 'admin' and 'respondent' roles are allowed. Returns the created user object.",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/UserRegistrationInput"},
              "example": {
                "username": "newuser",
                "email": "newuser@example.com",
                "password": "password123",
                "role": "respondent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully.",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/User"},
                "example": {
                  "id": "64b7c2f1e4b0f2a1b2c3d4e5",
                  "username": "newuser",
                  "email": "newuser@example.com",
                  "role": "respondent",
                  "created_at": "2024-07-01T12:00:00Z",
                  "updated_at": "2024-07-01T12:00:00Z"
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "example": {"message": "Validation error", "errors": {"email": ["Not a valid email address."]}}
              }
            }
          },
          "409": {
            "description": "Username or email already exists.",
            "content": {
              "application/json": {
                "example": {"message": "Username already exists."}
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Authenticate user and obtain JWT tokens",
        "description": "Authenticates a user and returns access and refresh JWT tokens along with user info.",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/UserLoginInput"},
              "example": {
                "username": "admin",
                "password": "adminpass"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful. Returns JWT tokens and user info.",
            "content": {
              "application/json": {
                "example": {
                  "access_token": "<JWT access token>",
                  "refresh_token": "<JWT refresh token>",
                  "user": {
                    "id": "64b7c2f1e4b0f2a1b2c3d4e5",
                    "username": "admin",
                    "email": "admin@example.com",
                    "role": "admin",
                    "created_at": "2024-07-01T12:00:00Z",
                    "updated_at": "2024-07-01T12:00:00Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "example": {"message": "Validation error", "errors": {"username": ["Missing data for required field."]}}
              }
            }
          },
          "401": {
            "description": "Invalid username or password.",
            "content": {
              "application/json": {
                "example": {"message": "Invalid username or password."}
              }
            }
          }
        }
      }
    }
  }
} 